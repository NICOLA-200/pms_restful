generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL") // Load database from environment variables
}

model User {
  id          Int      @id @default(autoincrement())
  firstName   String
  lastName    String
  email       String   @unique
  phoneNumber String?
  password    String
  role        Role     @default(USER)
  vehicles Vehicle[]
  reservations Reservation[]
  createdAt DateTime @default(now())
}


enum Role {
  USER
  ADMIN
}

model Vehicle {
  id         Int      @id @default(autoincrement())
  userId     Int
  plate      String   @unique
  type       String?
  size       String?
  model      String?
  color      String?
  user       User     @relation(fields: [userId], references: [id])
  reservations Reservation[]
} 


model ParkingSlot {
  id          Int          @id @default(autoincrement())
  slotCode    String       @unique
  size        String       // e.g., "small", "medium", "large"
  vehicleType String       // e.g., "car", "motorcycle", "truck"
  location    String       // e.g., "parking lot section"
  status      String       @default("available") // "available" or "unavailable"
  reservations Reservation[]
}

model Reservation {
  id            Int         @id @default(autoincrement())
  userId        Int
  vehicleId     Int
  parkingSlotId Int?
  status        Status      @default(PENDING)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  user          User        @relation(fields: [userId], references: [id])
  vehicle       Vehicle     @relation(fields: [vehicleId], references: [id])
  parkingSlot   ParkingSlot? @relation(fields: [parkingSlotId], references: [id])
}

enum Status {
  PENDING
  APPROVED
  REJECTED
}